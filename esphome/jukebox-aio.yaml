substitutions:
  name: rfid-jukebox
  friendly_name: RFID Jukebox
  task_stack_in_psram: "true" # important to disable this for non-S3 model
  pn532_sclk: GPIO12
  pn532_mosi: GPIO11
  pn532_miso: GPIO13
  pn532_cs: GPIO10
  encoder_a_pin: GPIO5   # USR-ES1 nRESET (your A/CLK)
  encoder_b_pin: GPIO6   # USR-ES1 nINT   (your B/DT)
  btn_prev_pin: GPIO21   # <- wire this button to GND + this GPIO
  btn_next_pin: GPIO7   # <- wire this button to GND + this GPIO
  ma_filesystem: filesystem_local--tkx9ahNv
  ma_entity: media_player.jukebox_pau_louder_mediaplayer_2

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  min_version: 2025.8.0
  name_add_mac_suffix: false
  platformio_options:
    board_build.flash_mode: dio
  includes:
  # Importnant! Play sound on boot required for DAC to capture clock signal and enable DSP configuration
  # If any of the DSP configs are sent before clock signal, they are simply ignored. This applies to EQ and Mixer controls
  on_boot:
    - priority: 220.0
      then:
        media_player.speaker.play_on_device_media_file: startup_sync_sound

esp32:
  board: esp32-s3-devkitc-1
  variant: ESP32S3
  flash_size: 16MB
  partitions: partitions.csv
  framework:
    type: esp-idf
    version: recommended
    sdkconfig_options:
      CONFIG_ESP32S3_DEFAULT_CPU_FREQ_240: "y"
      CONFIG_ESP32S3_DATA_CACHE_64KB: "y"
      CONFIG_ESP32S3_DATA_CACHE_LINE_64B: "y"
      CONFIG_ESP32S3_INSTRUCTION_CACHE_32KB: "y"

      CONFIG_ESP32_S3_BOX_BOARD: "y"

      CONFIG_BT_ALLOCATION_FROM_SPIRAM_FIRST: "y"
      CONFIG_BT_BLE_DYNAMIC_ENV_MEMORY: "y"

      CONFIG_MBEDTLS_EXTERNAL_MEM_ALLOC: "y"
      CONFIG_MBEDTLS_SSL_PROTO_TLS1_3: "y"  # TLS1.3 support isn't enabled by default in IDF 5.1.5

# Enable logging
logger:
  level: DEBUG
  
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
#  ap:
#    ssid: "$name Hotspot"
#    password: !secret esphome_ap_password
  power_save_mode: none   # lowers latency/jitter for streaming
  manual_ip:
    static_ip: 192.168.1.160
    gateway: 192.168.1.1
    subnet: 255.255.255.0
    dns1: 192.168.1.1

captive_portal:

# Allow Over-The-Air updates
ota:
  platform: esphome
#  password: !secret esphome_ota_password

api:

psram:
  mode: octal
  speed: 80MHz

external_components:
  - source: github://mrtoy-me/esphome-tas5805m@main
    components: [ tas5805m ]
    refresh: 60s

globals:
  - id: current_volume
    type: float
  - id: last_tag_queued
    type: std::string
    restore_value: no
    initial_value: ""
  - id: last_tag_uid
    type: std::string
    restore_value: no
    initial_value: ""

i2c:
  sda: GPIO8
  scl: GPIO9
  frequency: 400kHz
  scan: True

### TAS5805M DAC configuration
audio_dac:
  - platform: tas5805m
    id: tas5805m_dac
    enable_pin: GPIO17  # Physical pin connected to PWDN pin
    dac_mode: BTL       # 'BTL' / Bridge Tied Load - 2Ch Stereo, or 'PBTL' / Parallel Bridge Tied Load - 1Ch Mono (double power)
    mixer_mode: STEREO  # STEREO, STEREO_INVERSE, MONO, LEFT, RIGHT
    analog_gain: -9db   # Startup Gain or Output voltage swing - pick based on the power supply voltage: https://github.com/sonocotta/esp32-tas5805m-dac?tab=readme-ov-file#digital-volume-and-analog-gain
    volume_max: -6dB    # Max HA volume mapping to Digital Volume control, goes as high as +24dB, but not recommend going much above 0 dB, risking to cause clipping on high volume
    volume_min: -60db   # Min HA volume mapping to Digital Volume control, goes as low as -103dB, but prefer to set higher to have a reasonable volume range
    update_interval: 5s # How often fault registers are read and cleared

i2s_audio:
  i2s_lrclk_pin: GPIO15
  i2s_bclk_pin: GPIO14

speaker:
  - platform: i2s_audio
    id: speaker_id
    dac_type: external
    i2s_dout_pin: GPIO16
    audio_dac: tas5805m_dac
    channel: stereo
    sample_rate: 48000
    timeout: never
    buffer_duration: 100ms

  - platform: mixer
    id: mixer_speaker_id
    task_stack_in_psram: ${task_stack_in_psram}
    output_speaker: speaker_id
    source_speakers:
      - id: announcement_spk_mixer_input
        timeout: never
      - id: media_spk_mixer_input
        timeout: never

  - platform: resampler
    id: media_spk_resampling_input
    task_stack_in_psram: ${task_stack_in_psram}
    output_speaker: media_spk_mixer_input
    
  - platform: resampler
    id: announcement_spk_resampling_input
    task_stack_in_psram: ${task_stack_in_psram}
    output_speaker: announcement_spk_mixer_input

media_player:
  - platform: speaker
    name: Louder Mediaplayer
    id: louder_mediaplayer
    task_stack_in_psram: ${task_stack_in_psram}
    #buffer_size: 100000 # default is 1000000
    volume_increment: 2%
    volume_initial: 50%
    volume_max: 80%
    media_pipeline:
      speaker: media_spk_resampling_input
      num_channels: 2
      #format: NONE   
    announcement_pipeline:
      speaker: announcement_spk_resampling_input
      num_channels: 1
      #format: NONE   

    files:
      id: startup_sync_sound
      file: https://github.com/mrtoy-me/esphome-tas5805m/raw/main/components/tas5805m/tas5805m_boot_louder.flac

    on_play:
      - if:
          condition:
            switch.is_off: enable_louder
          then:
            switch.turn_on: enable_louder

    on_announcement:
      - if:
          condition:
            switch.is_off: enable_louder
          then:
            switch.turn_on: enable_louder
          
      - lambda: id(current_volume) = id(tas5805m_dac).volume();

      - mixer_speaker.apply_ducking:
            id: media_spk_mixer_input
            decibel_reduction: 40
            duration: 0.0s
      - wait_until:
            media_player.is_announcing:
      - delay: 0.75s
      - lambda: id(tas5805m_dac).set_volume(id(announce_volume).state / 100);

      - wait_until:
          not:
            media_player.is_announcing:
      - mixer_speaker.apply_ducking:
            id: media_spk_mixer_input
            decibel_reduction: 0
            duration: 1.0s
      - lambda: id(tas5805m_dac).set_volume(id(current_volume));

switch:
  - platform: tas5805m
    # Will be operated automatially. When disabled DAC will drow dramatically less power
    enable_dac:
      name: Enable Louder
      id: enable_louder
      restore_mode: ALWAYS_ON
    # Will be operated automatially. If you use EQ it is required to set it ON
    enable_eq:
      name: Enable EQ Control
      restore_mode: RESTORE_DEFAULT_ON

number:
  # Volume for announcements only
  - platform: template
    name: Announce Volume
    id: announce_volume
    icon: mdi:volume-source
    unit_of_measurement: "%"
    min_value: 0
    max_value: 100
    step: 1
    restore_value: true
    initial_value: 50
    optimistic: true

  ### 15 Band EQ. At this point frequency and bandwidth are hard-wired, since BQ coefficients table are not calculated on the fly
  # Each band regulates within [-15dB .. +15 dB] range
  # Each band overlaps with nearby bands, so with extreme settings it can go as high or low as -/+30dB, so use with care
  - platform: tas5805m
    eq_gain_band20Hz:
      name: Gain ---20Hz
    eq_gain_band31.5Hz:
      name: Gain ---31.5Hz
    eq_gain_band50Hz:
      name: Gain ---50Hz
    eq_gain_band80Hz:
      name: Gain ---80Hz
    eq_gain_band125Hz:
      name: Gain --125Hz
    eq_gain_band200Hz:
      name: Gain --200Hz
    eq_gain_band315Hz:
      name: Gain --315Hz
    eq_gain_band500Hz:
      name: Gain --500Hz
    eq_gain_band800Hz:
      name: Gain --800Hz
    eq_gain_band1250Hz:
      name: Gain -1250Hz
    eq_gain_band2000Hz:
      name: Gain -2000Hz
    eq_gain_band3150Hz:
      name: Gain -3150Hz
    eq_gain_band5000Hz:
      name: Gain -5000Hz
    eq_gain_band8000Hz:
      name: Gain -8000Hz
    eq_gain_band16000Hz:
      name: Gain 16000Hz

### Faults clear registers read from TAS5805M
# Every time fault is detected, it will be reported to HA and clears afterwards
# This is to ensure that device will not stuck in the fault state until reboot
sensor:
  - platform: tas5805m
    faults_cleared:
      name: "Times Faults Cleared"
    update_interval: 60s
  - platform: rotary_encoder
    name: "${friendly_name} Encoder"
    pin_a:
      number: ${encoder_a_pin}
      mode: INPUT_PULLUP
      inverted: true
    pin_b:
      number: ${encoder_b_pin}
      mode: INPUT_PULLUP
      inverted: true
    resolution: 2
    filters:
      - throttle: 50ms
    on_clockwise:
      - media_player.volume_up:
          id: louder_mediaplayer
    on_anticlockwise:
      - media_player.volume_down:
          id: louder_mediaplayer

### Faults registers read directly from TAS5805M
# TODO: Over Temperature Warning -> reduce volume automatically before it goes into shutdown
binary_sensor:
  - platform: tas5805m
    have_fault:
      name: Any Faults
    left_channel_dc_fault:
      name: Left Channel DC Fault
    right_channel_dc_fault:
      name: Right Channel DC Fault
    left_channel_over_current:
      name: Left Channel Over Current
    right_channel_over_current:
      name: Right Channel Over Current
    otp_crc_check:
      name: CRC Check Fault
    bq_write_failed:
      name: BQ Write Failure
    clock fault:
      name: I2S Clock Fault
    pcdd_over_voltage:
      name: PCDD Over Voltage
    pcdd_under_voltage:
      name: PCDD Under Voltage
    over_temp_shutdown:
      name: Over Temperature Shutdown Fault
    over_temp_warning:
      name: Over Temperature Warning
      id: over_temperature_warning

  - platform: gpio
    name: "${friendly_name} Prev Button"
    pin:
      number: ${btn_prev_pin}
      mode: INPUT_PULLUP
      inverted: true
    filters:
      - delayed_on: 20ms
      - delayed_off: 20ms
    on_press:
      - homeassistant.action:
          action: media_player.media_previous_track
          data:
            entity_id: ${ma_entity}

  - platform: gpio
    name: "${friendly_name} Next Button"
    pin:
      number: ${btn_next_pin}
      mode: INPUT_PULLUP
      inverted: true
    filters:
      - delayed_on: 20ms
      - delayed_off: 20ms
    on_press:
      - homeassistant.action:
          action: media_player.media_next_track
          data:
            entity_id: ${ma_entity}


### Send DAC to shutdown mode after 2 minutes of inactivity
# This is to save power, since DAC will draw under 100mA in idle state
interval:
  - interval: 30s
    then:
      - if:
          condition:
            - switch.is_on: enable_louder
            - for:
                time: 120s
                condition:
                  or:
                    - media_player.is_idle: louder_mediaplayer
                    - media_player.is_paused: louder_mediaplayer
          then:
            - switch.turn_off: enable_louder
  # Optional: when DAC reports overheating warning, reduce volume to prevent shutdown
  - interval: 1s
    then:
      - if:
          condition:
            - binary_sensor.is_on: over_temperature_warning
            - lambda: 'return (id(louder_mediaplayer).volume != 0.0f);'
            - lambda: 'return !(id(louder_mediaplayer).is_muted());'
          then:
            - media_player.volume_down

button:
  - platform: restart
    id: restart_btn
    name: "${friendly_name} REBOOT"
  - platform: template
    id: map_current_tag_btn
    name: "Map Current Tag → Folder"
    on_press:
      - lambda: |-
          std::string tag = id(rfid_tag_uid).state.c_str();
          std::string folder = id(folder_to_map).state.c_str();
          if (tag.empty() || tag == "Unknown" || tag == "none" || folder.empty()) {
            ESP_LOGW("rfid", "Skip mapping (tag='%s', folder='%s')", tag.c_str(), folder.c_str());
            return;
          }

          // Normalize UID (remove colons, uppercase)
          std::string norm = tag;
          norm.erase(std::remove(norm.begin(), norm.end(), ':'), norm.end());
          for (auto &c : norm) c = ::toupper((unsigned char)c);

          // Key: namespace 'TAGM' XOR FNV1 hash of UID
          const uint32_t key = 0x5441474Du ^ esphome::fnv1_hash(norm);

          // Store folder (fixed-size char[64] - should be sufficient for most folder names)
          char buf[64];
          memset(buf, 0, sizeof(buf));
          strncpy(buf, folder.c_str(), sizeof(buf) - 1);

          auto pref = esphome::global_preferences->make_preference<char[64]>(key);
          if (!pref.save(&buf)) {
            ESP_LOGE("rfid", "NVS save failed for %s - storage may be full", norm.c_str());
            return;
          }
          ESP_LOGI("rfid", "Mapped %s -> %s", norm.c_str(), buf);

spi:
  clk_pin: ${pn532_sclk}
  mosi_pin: ${pn532_mosi}
  miso_pin: ${pn532_miso}

text_sensor:
  - platform: template
    name: "RFID Jukebox Tag"
    id: rfid_tag_uid
    icon: "mdi:rfid"
#    on_value:
#      then:
#        - script.execute: handle_tag_change
  - platform: template
    id: rfid_mapped_folder
    name: "RFID Mapped Folder"
    update_interval: never

text:
  - platform: template
    id: folder_to_map
    name: "RFID Folder to Map"
    mode: text          # <— valid here
    optimistic: true
    restore_value: true
    initial_value: "test2"
    min_length: 0
    max_length: 63


pn532_spi:
  cs_pin: ${pn532_cs}
  update_interval: 200ms   # slightly relaxed to avoid churn
  on_tag:
    then:
      - text_sensor.template.publish:
          id: rfid_tag_uid
          state: !lambda 'return x;'
      - script.execute: handle_tag_change   # defer all work
  on_tag_removed:
    then:
      - text_sensor.template.publish:
          id: rfid_tag_uid
          state: "Unknown"
      - script.execute: handle_tag_change
      - media_player.pause   # pause the local ESPHome player

script:
  - id: handle_tag_change
    mode: restart
    then:
      # Yield out of the PN532 cycle so HA/API stays responsive
      # 1) Resolve mapping for current tag
      - lambda: |-
          std::string curr = id(rfid_tag_uid).state.c_str();
          if (curr.empty() || curr == "Unknown") {
            id(rfid_mapped_folder).publish_state("");
            ESP_LOGI("rfid","handle_tag_change: tag cleared");
            return;
          }

          // normalize UID (remove colons, uppercase)
          std::string norm = curr;
          norm.erase(std::remove(norm.begin(), norm.end(), ':'), norm.end());
          for (auto &c : norm) c = ::toupper((unsigned char)c);

          // Key and NVS read
          const uint32_t key = 0x5441474Du ^ esphome::fnv1_hash(norm);
          char buf[64];
          memset(buf, 0, sizeof(buf));
          auto pref = esphome::global_preferences->make_preference<char[64]>(key);

          if (!pref.load(&buf) || buf[0] == '\0') {
            id(rfid_mapped_folder).publish_state("");
            ESP_LOGI("rfid","handle_tag_change: %s unmapped", norm.c_str());
            return;
          }

          std::string folder = buf;
          
          // Clean up folder path
          while (!folder.empty() && (folder.front() == '/' || folder.front() == '\\')) folder.erase(0,1);
          for (auto &c : folder) if (c == '\\') c = '/';

          // stash folder + media_id for the action step
          id(rfid_mapped_folder).publish_state(folder.c_str());  // UI only; harmless
          id(last_tag_queued) = std::string("${ma_filesystem}") + "://folder/" + folder;
          ESP_LOGI("rfid","handle_tag_change: %s -> '%s'", norm.c_str(), folder.c_str());

      # 2) If mapped → RESUME when same tag returns, else START (replace queue)
      - if:
          condition:
            lambda: 'return id(rfid_mapped_folder).state.size() > 0;'
          then:
            # same tag → RESUME
            - if:
                condition:
                  lambda: 'return id(rfid_tag_uid).state == id(last_tag_uid);'
                then:
                  - media_player.play
                  - lambda: 'ESP_LOGI("rfid","resume: same tag");'
                else:
                  # different tag → START (replace queue)
                  - homeassistant.action:
                      action: music_assistant.play_media
                      data:
                        entity_id: ${ma_entity}
                        media_type: folder
                        enqueue: replace
                        media_id: !lambda 'return id(last_tag_queued);'
                  - lambda: 'ESP_LOGI("rfid","start: %s", id(last_tag_queued).c_str());'

            # 3) Update "previous" AFTER acting on a mapped tag
            - lambda: 'id(last_tag_uid) = id(rfid_tag_uid).state;'

